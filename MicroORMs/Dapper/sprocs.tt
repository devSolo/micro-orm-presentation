<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".generated.cs" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
//-----------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool at <#=DateTime.Now#>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using Dapper;

namespace ETNUG.Sample.MicroORMs
{
	public static class ChinookDB
	{
	<#foreach (var classDefinition in GetClassDefinitions("Chinook")) {
			var parms = classDefinition.Parameters.Select(x=>String.Format("{0} {1}",ConvertToType(x.SqlDbType),x.ParameterName.Replace("@",""))).ToArray();
			var parmsAnon = classDefinition.Parameters.Select(x=>String.Format("{0}={0}",x.ParameterName.Replace("@",""))).ToArray();
	#>
	<# if (parms.Count()>0) { #>

		public static IEnumerable<<#=classDefinition.Name#>> <#=classDefinition.Name#>(<#=String.Join(", ",parms)#>)
		{
			using (IDbConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["Chinook"].ConnectionString))
			{
				conn.Open();
				return conn.Query<<#=classDefinition.Name#>>("<#=classDefinition.Name#>", new {<#=String.Join(", ",parmsAnon)#> } , commandType: CommandType.StoredProcedure);
			}
		}
	<#} else{ #>

		public static IEnumerable<<#=classDefinition.Name#>> <#=classDefinition.Name#>()
		{
			using (IDbConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings["Chinook"].ConnectionString))
			{
				conn.Open();
				return conn.Query<<#=classDefinition.Name#>>("<#=classDefinition.Name#>", commandType: CommandType.StoredProcedure);
			}
		}
	<# } #>
<#}#>
}

<#foreach (var classDefinition in GetClassDefinitions("Chinook")) {#>

    public partial class <#=classDefinition.Name#>
    {<#foreach (var propertyDefinition in classDefinition.Properties) {#>

        public <#=propertyDefinition.Type.FullName#> <#=propertyDefinition.Name#> { get; set; }<#}#>

    }
<#}#>
}
<#+
private class PropertyDefinition
{
    public string Name { get; set; }
    public Type Type { get; set; }
}

private class ClassDefinition
{
    private readonly List<PropertyDefinition> properties = new List<PropertyDefinition>();
    private readonly List<SqlParameter> parameters = new List<SqlParameter>();

    public string Name { get; set; }

    public List<PropertyDefinition> Properties
    {
        get
        {
            return properties;
        }
    }

    public List<SqlParameter> Parameters
    {
        get
        {
            return parameters;
        }
    }

    public static ClassDefinition FromColumns(string name, DataColumnCollection columns)
    {
        var classDefinition = new ClassDefinition { Name = name };
        foreach (DataColumn column in columns)
        {
            classDefinition.Properties.Add(new PropertyDefinition { Name = column.ColumnName, Type = column.DataType });
        }
        return classDefinition;
    }

    public static ClassDefinition FromColumnsAndParameters(string name, DataColumnCollection columns, SqlParameter[] parameters)
    {
        var classDefinition = new ClassDefinition { Name = name };
        foreach (DataColumn column in columns)
        {
            classDefinition.Properties.Add(new PropertyDefinition { Name = column.ColumnName, Type = column.DataType });
        }
				classDefinition.Parameters.AddRange(parameters);
        return classDefinition;
    }
}

private static IEnumerable<ClassDefinition> GetClassDefinitions(string database)
{
    using (SqlConnection connection = new SqlConnection(GetConnectionString(database)))
    {
        connection.Open();

        foreach (var procedure in GetProcedures(connection))
        {
            DataColumnCollection columns = null;
						SqlParameter[] parameters = null;

            try
            {
                parameters = GetParameters(connection, procedure);

                using (var transaction = connection.BeginTransaction())
                {
                    using (var command = new SqlCommand("SET FMTONLY ON", connection, transaction))
                    {
                        command.ExecuteNonQuery();
                    }

                    using (var command = new SqlCommand(procedure, connection, transaction) { CommandType = CommandType.StoredProcedure })
                    {
                        command.Parameters.AddRange(parameters);

                        using (var adapter = new SqlDataAdapter(command))
                        {
                            var schemaTable = new DataTable();
                            adapter.Fill(schemaTable);
                            columns = schemaTable.Columns;
                        }
                    }

                    using (var command = new SqlCommand("SET FMTONLY OFF", connection, transaction))
                    {
                        command.ExecuteNonQuery();
                    }
                }
            }
            catch (SqlException)
            {
                continue;
            }

            yield return ClassDefinition.FromColumnsAndParameters(procedure, columns, parameters);
        }
    }
}

private static string GetConnectionString(string database)
{
    return string.Format("Data Source=.;Initial Catalog={0};Integrated Security=SSPI;", database);
}

private static IEnumerable<string> GetProcedures(SqlConnection connection)
{
    return connection.GetSchema("Procedures").Rows.Cast<DataRow>().Select(o => o["ROUTINE_NAME"].ToString()).Where(o => !o.ToLower().EndsWith("_old"));
}

private static SqlParameter[] GetParameters(SqlConnection connection, string procedure)
{
    var paramTable = connection.GetSchema("ProcedureParameters", new[] { null, null, procedure, null });
    var parameters = new List<SqlParameter>();

    foreach (DataRow row in paramTable.Rows)
    {
        parameters.Add(GetParameter(row));
    }

    return parameters.ToArray();
}

private static SqlParameter GetParameter(DataRow row)
{
    var dataType = (SqlDbType)Enum.Parse(typeof(SqlDbType), row["DATA_TYPE"].ToString(), true);
    var parameterName = row["PARAMETER_NAME"].ToString();

    var parameter = new SqlParameter(parameterName, DBNull.Value) { SqlDbType = dataType };

    if (!Convert.IsDBNull(row["CHARACTER_MAXIMUM_LENGTH"]))
    {
        parameter.Size = Convert.ToInt32(row["CHARACTER_MAXIMUM_LENGTH"]);
    }

    return parameter;
}

private static String ConvertToType(SqlDbType type)
{
	//Dictionary<string,string> typeMap = new Dictionary<string,string>();
	//typeMap.Add("VarChar","string");

	switch(type)
	{
		case(SqlDbType.VarChar): return "string";
		case(SqlDbType.NVarChar): return "string";
		case(SqlDbType.Char): return "string";
		case(SqlDbType.Int): return "int";
		case(SqlDbType.Bit): return "bool";
	}

	return type.ToString();
}
#>